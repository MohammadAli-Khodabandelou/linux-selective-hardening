FROM ubuntu:20.04 as kernel-build

ARG FEATURE

# copy the required files over
COPY / /

# install dependencies
ARG DEBIAN_FRONTEND=noninteractive
ENV TZ=America/New_York
RUN apt update

RUN apt install -y git iucode-tool

RUN apt install -y \ 
    bash \ 
    wget \
    gnupg2 \
    lsb-core \
    software-properties-common \
    git \
    libncurses-dev \
    gawk \
    flex \
    bison \
    openssl \
    libssl-dev \
    dkms \
    libelf-dev \
    libudev-dev \
    libpci-dev \
    libiberty-dev \
    autoconf \
    iucode-tool \
    netcat

# download the kernel source
WORKDIR /
RUN mkdir -p /out/src
RUN git clone --branch cfi-5.15 --depth=1 https://github.com/samitolvanen/linux.git

# Download Intel ucode 
# baa le biralo badhethe bhanera biralo badheko
# no clue why it's needed but linuxkit does it so so doing it
WORKDIR /tmp
ENV UCODE_REPO=https://github.com/intel/Intel-Linux-Processor-Microcode-Data-Files
ENV UCODE_COMMIT=microcode-20210216
RUN set -e && \
    if [ $(uname -m) = x86_64 ]; then \
        git clone ${UCODE_REPO} ucode && \
        cd ucode && \
        git checkout ${UCODE_COMMIT} && \
        iucode_tool --normal-earlyfw --write-earlyfw=/out/intel-ucode.cpio ./intel-ucode && \
        cp license /out/intel-ucode-license.txt && \
        mkdir -p /lib/firmware && \
        cp -rav ./intel-ucode /lib/firmware; \
    fi

# Save kernel source
## skipping this step as it's time-consuming and unnecessary
# tar cJf /out/src/linux.tar.xz /linux

# kernel config and compile
WORKDIR /linux
RUN cp /x86_64_config_gcov /linux/arch/x86/configs/x86_64_defconfig &&\
    make defconfig && \
    make oldconfig && \
    scripts/config --set-str CONFIG_LOCALVERSION -gcov && \
    make -j `nproc` V=1 > log.txt && \
    cp log.txt /out/src && \
    cp arch/x86_64/boot/bzImage /out/kernel && \
    cp System.map /out

# Modules and Device Tree binaries
RUN make INSTALL_MOD_PATH=/tmp/kernel-modules modules_install && \
    ( DVER=$(basename $(find /tmp/kernel-modules/lib/modules/ -mindepth 1 -maxdepth 1)) && \
      cd /tmp/kernel-modules/lib/modules/$DVER && \
      rm build source && \
      ln -s /usr/src/linux-headers-$DVER build ) && \
    case $(uname -m) in \
    aarch64) \
        make INSTALL_DTBS_PATH=/tmp/kernel-modules/boot/dtb dtbs_install; \
        ;; \
    esac && \
    ( cd /tmp/kernel-modules && tar cf /out/kernel.tar . )

# Headers (userspace API)
RUN mkdir -p /tmp/kernel-headers/usr && \
    make INSTALL_HDR_PATH=/tmp/kernel-headers/usr headers_install && \
    ( cd /tmp/kernel-headers && tar cf /out/kernel-headers.tar usr )

# Headers (kernel development)
RUN DVER=$(basename $(find /tmp/kernel-modules/lib/modules/ -mindepth 1 -maxdepth 1)) && \
    dir=/tmp/usr/src/linux-headers-$DVER && \
    mkdir -p $dir && \
    cp /linux/.config $dir && \
    cp /linux/Module.symvers $dir && \
    find . -path './include/*' -prune -o \
           -path './arch/*/include' -prune -o \
           -path './scripts/*' -prune -o \
           -type f \( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o \
                      -name '*.lds' -o -name '*.pl' -o -name '*.sh' -o \
                      -name 'objtool' -o -name 'fixdep' -o -name 'randomize_layout_seed.h' \) | \
         tar cf - -T - | (cd $dir; tar xf -) && \
    ( cd /tmp && tar cf /out/kernel-dev.tar usr/src )
RUN cp -r /out/* /
